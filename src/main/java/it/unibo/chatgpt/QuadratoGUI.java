/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.chatgpt;

import javax.swing.*;
import javafx.geometry.Point2D;
import java.awt.*;
import java.awt.event.*;
import java.awt.Toolkit;
import java.util.Random;

public class QuadratoGUI extends JPanel {

    private static final int HAMMER_HITBOX = 40;
    private static final int PLAYER_DIM = 50;
    private static final int HAMMER_DEF_RANGE = 100;
    private static final int MOLE_HITBOX = 40;
    private static final int MOLE_POSITION = 230;
    
    private int moleMinDelay;
    private int moleMaxDelay;
    private int x, y;
    private Point2D center;
    private Point2D temp;
    private int hammerTempRange;
    private MouseListenerImpl mouseInputs;
    private KeyListener keyboarListener;
    private static boolean cursorOnScreen;
    protected HitBox playerHitBox;
    protected static HitBox hammerHitBox;
    protected static HitBox moleHitBox;
    private MolesManager molesManage;
    private Dimension dim;

    public QuadratoGUI() {
        this.moleMinDelay = 3000;
        this.moleMaxDelay = 5500;
        dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.molesManage = new MolesManager(this, dim);
        this.mouseInputs = new MouseListenerImpl();
        this.keyboarListener = new KeyListenerImpl();
        QuadratoGUI.cursorOnScreen = false;
        x = 100;
        y = 100;
        this.playerHitBox = new RectangleHB(PLAYER_DIM, PLAYER_DIM, new Point2D(x, y));
        QuadratoGUI.moleHitBox = new RectangleHB(MOLE_HITBOX, MOLE_HITBOX, new Point2D(MOLE_POSITION , MOLE_POSITION ));

        setPreferredSize(new Dimension(500, 500));
        setBackground(Color.WHITE);
        setFocusable(true);
        addKeyListener(keyboarListener);
        addMouseListener(mouseInputs);
        addMouseMotionListener(mouseInputs);
        startTimer();
        startMoleTimer();
    }


    // da mettere nel Game Loop


    private void startTimer() {
        Timer timer = new Timer(10, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mouseInputs.setHammerRange();
                x += ((KeyListenerImpl) keyboarListener).getMoveX();
                y += ((KeyListenerImpl) keyboarListener).getMoveY();
                if (((KeyListenerImpl) keyboarListener).isSpacePressed()) {
                    molesManage.moleMoves();
                    ((KeyListenerImpl) keyboarListener).setSpacePressed();
                }
                repaint();
            }
        });
        timer.start(); 
    }

    private void startMoleTimer() {
        Timer moleTimer = new Timer(moleMinDelay + (new Random().nextInt(moleMaxDelay)), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                molesManage.addMole();
            }
        });
        moleTimer.start();
    }
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        g.setColor(Color.BLACK);

        molesManage.drawMoles(g);

        molesManage.drawFence(g);

        playerHitBox.setCenter(new Point2D(x , y));
        moleHitBox.drawHitBox(g);
        playerHitBox.drawHitBox(g);
        /*g.fillRect(x - PLAYER_DIM / 2, y - PLAYER_DIM / 2,
            PLAYER_DIM, PLAYER_DIM);*/
        //if 
        

        //INCREMENTO RANGE MARTELLO
        hammerTempRange = mouseInputs.getHammerRange();
        g.drawOval(x - ((HAMMER_DEF_RANGE + hammerTempRange) / 2), y - ((HAMMER_DEF_RANGE + hammerTempRange) / 2),
            HAMMER_DEF_RANGE + hammerTempRange, HAMMER_DEF_RANGE + hammerTempRange);
        
            
        //POSIZIONE MARTELLO
        if (cursorOnScreen && mouseInputs.getMouseOnScreen()){
            this.temp = mouseInputs.getHammerLocation();
            this.center = new Point2D(x, y);
                
            double r = (HAMMER_DEF_RANGE + hammerTempRange) / 2;
            double angle = Math.atan2(temp.getY()-center.getY(), temp.getX()-center.getX());
            double tempX = r * Math.cos(angle);
            double tempY = r * Math.sin(angle);
            
            g.drawOval(x + ((int) tempX) - HAMMER_HITBOX / 2, y + ((int) tempY) - HAMMER_HITBOX / 2,
                HAMMER_HITBOX, HAMMER_HITBOX);   
            QuadratoGUI.hammerHitBox = new CircleHB(new Point2D(x + ((int) tempX), y + ((int) tempY))
                , HAMMER_HITBOX / 2);
        }

        if (!cursorOnScreen) {
            KeyListenerImpl.moveX = 0;
            KeyListenerImpl.moveY = 0;
        }

        /*if (hammerHitBox.isColliding(moleHitBox)) {
            System.out.println(moleHitBox.getCenter() + "   " + playerHitBox.getCenter());
        }*/
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("QuadratoGUI");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new QuadratoGUI());
        frame.pack();
        frame.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {
                cursorOnScreen = true;
            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                cursorOnScreen = false;
            }
            
        });
        frame.setVisible(true);
    }
}